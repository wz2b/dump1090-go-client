// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dump1090/aircraft.proto

package dump1090

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AircraftInfo struct {
	Icao24               *string  `protobuf:"bytes,1,req,name=icao24" json:"icao24,omitempty" csv:"icao24"`
	Registration         *string  `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty" csv:"registration"`
	ManufacturerIcao     *string  `protobuf:"bytes,3,opt,name=manufacturerIcao" json:"manufacturerIcao,omitempty" csv:"manufacturericao"`
	ManufacturerName     *string  `protobuf:"bytes,4,opt,name=manufacturerName" json:"manufacturerName,omitempty" csv:"manufacturername"`
	Model                *string  `protobuf:"bytes,5,opt,name=model" json:"model,omitempty" csv:"model"`
	TypeCode             *string  `protobuf:"bytes,6,opt,name=typeCode" json:"typeCode,omitempty" csv:"typecode"`
	SerialNumber         *string  `protobuf:"bytes,7,opt,name=serialNumber" json:"serialNumber,omitempty" csv:"serialnumber"`
	LineNumber           *string  `protobuf:"bytes,8,opt,name=lineNumber" json:"lineNumber,omitempty" csv:"linenumber"`
	IcaoAircraftType     *string  `protobuf:"bytes,9,opt,name=icaoAircraftType" json:"icaoAircraftType,omitempty" csv:"icaoaircrafttype"`
	Operator             *string  `protobuf:"bytes,10,opt,name=operator" json:"operator,omitempty" csv:"operator"`
	OperatorCallsign     *string  `protobuf:"bytes,11,opt,name=operatorCallsign" json:"operatorCallsign,omitempty" csv:"operatorcallsign"`
	OepratorIcao         *string  `protobuf:"bytes,12,opt,name=oepratorIcao" json:"oepratorIcao,omitempty" csv:"operatoricao"`
	OperatorIata         *string  `protobuf:"bytes,13,opt,name=operatorIata" json:"operatorIata,omitempty" csv:"operatoriata"`
	Owner                *string  `protobuf:"bytes,14,opt,name=owner" json:"owner,omitempty" csv:"owner"`
	TestReg              *string  `protobuf:"bytes,15,opt,name=testReg" json:"testReg,omitempty" csv:"testreg"`
	Registered           *string  `protobuf:"bytes,16,opt,name=registered" json:"registered,omitempty" csv:"registered"`
	ReguUtil             *string  `protobuf:"bytes,17,opt,name=reguUtil" json:"reguUtil,omitempty" csv:"regutil"`
	Status               *string  `protobuf:"bytes,18,opt,name=status" json:"status,omitempty" csv:"status"`
	Built                *string  `protobuf:"bytes,19,opt,name=built" json:"built,omitempty" csv:"built"`
	FirstFlightDate      *string  `protobuf:"bytes,20,opt,name=firstFlightDate" json:"firstFlightDate,omitempty" csv:"firstflightdate"`
	SeatConfiguration    *string  `protobuf:"bytes,21,opt,name=seatConfiguration" json:"seatConfiguration,omitempty" csv:"seatconfiguration"`
	Engines              *string  `protobuf:"bytes,22,opt,name=engines" json:"engines,omitempty" csv:"engines"`
	Modes                *string  `protobuf:"bytes,23,opt,name=modes" json:"modes,omitempty" csv:"modes"`
	Adsb                 *string  `protobuf:"bytes,24,opt,name=adsb" json:"adsb,omitempty" csv:"adsb"`
	Acars                *string  `protobuf:"bytes,25,opt,name=acars" json:"acars,omitempty" csv:"acars"`
	Notes                *string  `protobuf:"bytes,26,opt,name=notes" json:"notes,omitempty" csv:"notes"`
	CategoryDescription  *string  `protobuf:"bytes,27,opt,name=categoryDescription" json:"categoryDescription,omitempty" csv:"categorydescription"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AircraftInfo) Reset()         { *m = AircraftInfo{} }
func (m *AircraftInfo) String() string { return proto.CompactTextString(m) }
func (*AircraftInfo) ProtoMessage()    {}
func (*AircraftInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e91d5d5266ecb3d, []int{0}
}
func (m *AircraftInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AircraftInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AircraftInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AircraftInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AircraftInfo.Merge(m, src)
}
func (m *AircraftInfo) XXX_Size() int {
	return m.Size()
}
func (m *AircraftInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AircraftInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AircraftInfo proto.InternalMessageInfo

func (m *AircraftInfo) GetIcao24() string {
	if m != nil && m.Icao24 != nil {
		return *m.Icao24
	}
	return ""
}

func (m *AircraftInfo) GetRegistration() string {
	if m != nil && m.Registration != nil {
		return *m.Registration
	}
	return ""
}

func (m *AircraftInfo) GetManufacturerIcao() string {
	if m != nil && m.ManufacturerIcao != nil {
		return *m.ManufacturerIcao
	}
	return ""
}

func (m *AircraftInfo) GetManufacturerName() string {
	if m != nil && m.ManufacturerName != nil {
		return *m.ManufacturerName
	}
	return ""
}

func (m *AircraftInfo) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *AircraftInfo) GetTypeCode() string {
	if m != nil && m.TypeCode != nil {
		return *m.TypeCode
	}
	return ""
}

func (m *AircraftInfo) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *AircraftInfo) GetLineNumber() string {
	if m != nil && m.LineNumber != nil {
		return *m.LineNumber
	}
	return ""
}

func (m *AircraftInfo) GetIcaoAircraftType() string {
	if m != nil && m.IcaoAircraftType != nil {
		return *m.IcaoAircraftType
	}
	return ""
}

func (m *AircraftInfo) GetOperator() string {
	if m != nil && m.Operator != nil {
		return *m.Operator
	}
	return ""
}

func (m *AircraftInfo) GetOperatorCallsign() string {
	if m != nil && m.OperatorCallsign != nil {
		return *m.OperatorCallsign
	}
	return ""
}

func (m *AircraftInfo) GetOepratorIcao() string {
	if m != nil && m.OepratorIcao != nil {
		return *m.OepratorIcao
	}
	return ""
}

func (m *AircraftInfo) GetOperatorIata() string {
	if m != nil && m.OperatorIata != nil {
		return *m.OperatorIata
	}
	return ""
}

func (m *AircraftInfo) GetOwner() string {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return ""
}

func (m *AircraftInfo) GetTestReg() string {
	if m != nil && m.TestReg != nil {
		return *m.TestReg
	}
	return ""
}

func (m *AircraftInfo) GetRegistered() string {
	if m != nil && m.Registered != nil {
		return *m.Registered
	}
	return ""
}

func (m *AircraftInfo) GetReguUtil() string {
	if m != nil && m.ReguUtil != nil {
		return *m.ReguUtil
	}
	return ""
}

func (m *AircraftInfo) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *AircraftInfo) GetBuilt() string {
	if m != nil && m.Built != nil {
		return *m.Built
	}
	return ""
}

func (m *AircraftInfo) GetFirstFlightDate() string {
	if m != nil && m.FirstFlightDate != nil {
		return *m.FirstFlightDate
	}
	return ""
}

func (m *AircraftInfo) GetSeatConfiguration() string {
	if m != nil && m.SeatConfiguration != nil {
		return *m.SeatConfiguration
	}
	return ""
}

func (m *AircraftInfo) GetEngines() string {
	if m != nil && m.Engines != nil {
		return *m.Engines
	}
	return ""
}

func (m *AircraftInfo) GetModes() string {
	if m != nil && m.Modes != nil {
		return *m.Modes
	}
	return ""
}

func (m *AircraftInfo) GetAdsb() string {
	if m != nil && m.Adsb != nil {
		return *m.Adsb
	}
	return ""
}

func (m *AircraftInfo) GetAcars() string {
	if m != nil && m.Acars != nil {
		return *m.Acars
	}
	return ""
}

func (m *AircraftInfo) GetNotes() string {
	if m != nil && m.Notes != nil {
		return *m.Notes
	}
	return ""
}

func (m *AircraftInfo) GetCategoryDescription() string {
	if m != nil && m.CategoryDescription != nil {
		return *m.CategoryDescription
	}
	return ""
}

func init() {
	proto.RegisterType((*AircraftInfo)(nil), "AircraftInfo")
}

func init() { proto.RegisterFile("pkg/dump1090/aircraft.proto", fileDescriptor_2e91d5d5266ecb3d) }

var fileDescriptor_2e91d5d5266ecb3d = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdd, 0x4e, 0xe4, 0x36,
	0x14, 0xc7, 0x3b, 0x94, 0x4f, 0x33, 0xc0, 0x60, 0xbe, 0x0c, 0xa8, 0x13, 0x64, 0xa9, 0x12, 0x52,
	0x55, 0xa0, 0x15, 0x37, 0xe5, 0xae, 0x0c, 0x42, 0x9a, 0x1b, 0x2a, 0x59, 0xed, 0x4d, 0xef, 0x4c,
	0x72, 0x26, 0x6b, 0x6d, 0x26, 0x8e, 0x6c, 0x67, 0x57, 0xbc, 0xc9, 0x3e, 0xc9, 0x3e, 0xc3, 0x5e,
	0xee, 0x13, 0x44, 0x2b, 0xf6, 0x0d, 0xf2, 0x04, 0x2b, 0x9f, 0x24, 0x30, 0x78, 0xd8, 0xbd, 0x1b,
	0x9d, 0xff, 0xef, 0x67, 0x8f, 0x8f, 0x8f, 0x43, 0x8e, 0x8b, 0xb7, 0xe9, 0x79, 0x52, 0x4e, 0x8b,
	0x3f, 0x2e, 0xfe, 0xba, 0x38, 0x97, 0xca, 0xc4, 0x46, 0x4e, 0xdc, 0x59, 0x61, 0xb4, 0xd3, 0x47,
	0x24, 0xd5, 0xa9, 0x6e, 0x7e, 0xf3, 0x8f, 0xeb, 0xa4, 0xff, 0x77, 0x1b, 0x8f, 0xf3, 0x89, 0xa6,
	0xa7, 0x64, 0x59, 0xc5, 0x52, 0xff, 0x79, 0xc9, 0x7a, 0x27, 0x0b, 0xa7, 0x6b, 0xd7, 0x83, 0xba,
	0x8a, 0xfa, 0xb1, 0x7d, 0x77, 0xc5, 0x9b, 0x32, 0x17, 0x6d, 0x4e, 0xaf, 0x48, 0xdf, 0x40, 0xaa,
	0xac, 0x33, 0xd2, 0x29, 0x9d, 0xb3, 0x85, 0x93, 0xde, 0xe9, 0xda, 0xf5, 0x7e, 0x5d, 0x45, 0x14,
	0xf9, 0xd9, 0x90, 0x8b, 0x17, 0x2c, 0xbd, 0x25, 0x83, 0xa9, 0xcc, 0xcb, 0x89, 0x8c, 0x5d, 0x69,
	0xc0, 0x8c, 0x63, 0xa9, 0xd9, 0xcf, 0xe8, 0x1f, 0xd5, 0x55, 0xb4, 0x8f, 0xfe, 0x2c, 0xe0, 0xb7,
	0xe4, 0x62, 0xce, 0x09, 0xd7, 0xb9, 0x93, 0x53, 0x60, 0x8b, 0x3f, 0x58, 0x27, 0x97, 0x53, 0x08,
	0xd6, 0xf1, 0x0e, 0xfd, 0x95, 0x2c, 0x4d, 0x75, 0x02, 0x19, 0x5b, 0x42, 0x79, 0xab, 0xae, 0xa2,
	0xf5, 0x46, 0xf6, 0x55, 0x2e, 0x9a, 0x94, 0x9e, 0x91, 0x55, 0xf7, 0x50, 0xc0, 0x48, 0x27, 0xc0,
	0x96, 0x91, 0xa4, 0x75, 0x15, 0x6d, 0x22, 0xe9, 0x83, 0x58, 0x27, 0xc0, 0xc5, 0x13, 0xe3, 0x5b,
	0x64, 0xc1, 0x28, 0x99, 0xdd, 0x95, 0xd3, 0x7b, 0x30, 0x6c, 0x25, 0x68, 0x51, 0x13, 0xe6, 0x18,
	0x72, 0xf1, 0x82, 0xa5, 0x97, 0x84, 0x64, 0x2a, 0x87, 0xd6, 0x5c, 0x45, 0x73, 0xb7, 0xae, 0xa2,
	0x01, 0x9a, 0x3e, 0xea, 0xbc, 0x19, 0xce, 0x37, 0xc4, 0xf7, 0xaa, 0xbb, 0xd2, 0x7f, 0x1f, 0x0a,
	0x60, 0x6b, 0x41, 0x43, 0x3c, 0xd0, 0x8d, 0x84, 0xff, 0xab, 0x5c, 0xcc, 0x39, 0xfe, 0xa4, 0xba,
	0x00, 0x23, 0x9d, 0x36, 0x8c, 0x04, 0x27, 0xed, 0x02, 0x2e, 0x9e, 0x18, 0xbf, 0x6f, 0xf7, 0x7b,
	0x24, 0xb3, 0xcc, 0xaa, 0x34, 0x67, 0xeb, 0xc1, 0xbe, 0x1d, 0x10, 0xb7, 0x00, 0x17, 0x73, 0x8e,
	0xef, 0x98, 0x86, 0x02, 0x6b, 0x38, 0x14, 0xfd, 0xa0, 0x63, 0x9d, 0xd0, 0x0c, 0xc4, 0x0b, 0x16,
	0xdd, 0x36, 0x1e, 0x4b, 0x27, 0xd9, 0xc6, 0xf7, 0x5c, 0xe9, 0xa4, 0x77, 0x67, 0x58, 0x3f, 0x00,
	0xfa, 0x7d, 0x0e, 0x86, 0x6d, 0x06, 0x03, 0x80, 0x55, 0x2e, 0x9a, 0x94, 0xfe, 0x46, 0x56, 0x1c,
	0x58, 0x27, 0x20, 0x65, 0x5b, 0x08, 0x6e, 0xd7, 0x55, 0xb4, 0xd1, 0xdc, 0x3f, 0x58, 0x67, 0x20,
	0xe5, 0xa2, 0x23, 0xfc, 0x0d, 0x36, 0x43, 0x0f, 0x06, 0x12, 0x36, 0x08, 0x6e, 0xf0, 0x39, 0xe2,
	0x62, 0x86, 0xa3, 0xbf, 0x93, 0x55, 0x03, 0x69, 0xf9, 0x9f, 0x53, 0x19, 0xdb, 0x0e, 0xf6, 0xf0,
	0x81, 0x53, 0x19, 0x17, 0x4f, 0x88, 0x7f, 0xaf, 0xd6, 0x49, 0x57, 0x5a, 0x46, 0x11, 0x7e, 0x7e,
	0xaf, 0x4d, 0x99, 0x8b, 0x36, 0xf7, 0x47, 0xbc, 0x2f, 0x55, 0xe6, 0xd8, 0x4e, 0x70, 0x44, 0xac,
	0x72, 0xd1, 0xa4, 0x74, 0x44, 0xb6, 0x26, 0xca, 0x58, 0x77, 0x9b, 0xa9, 0xf4, 0x8d, 0xbb, 0x91,
	0x0e, 0xd8, 0x2e, 0x0a, 0x87, 0x75, 0x15, 0xed, 0xa1, 0x80, 0xf9, 0x04, 0xf3, 0x44, 0x3a, 0xe0,
	0x22, 0x34, 0xe8, 0x98, 0x6c, 0x5b, 0x90, 0x6e, 0xa4, 0xf3, 0x89, 0x4a, 0xcb, 0xf6, 0x03, 0xb1,
	0x87, 0xcb, 0x1c, 0xd7, 0x55, 0x74, 0xd0, 0x4e, 0xbf, 0x74, 0xf1, 0x2c, 0xc1, 0xc5, 0xbc, 0xe5,
	0x5b, 0x0e, 0x79, 0xaa, 0x72, 0xb0, 0x6c, 0x3f, 0x68, 0x47, 0x5b, 0xe7, 0xa2, 0x23, 0xba, 0x77,
	0x6c, 0xd9, 0xc1, 0x2b, 0xef, 0xd8, 0xb6, 0xef, 0xd8, 0x52, 0x4e, 0x16, 0x65, 0x62, 0xef, 0x19,
	0x43, 0x6a, 0xb3, 0xae, 0x22, 0x82, 0x94, 0x2f, 0x72, 0x81, 0x99, 0x5f, 0x4a, 0xc6, 0xd2, 0x58,
	0x76, 0x18, 0x2c, 0x85, 0x55, 0x2e, 0x9a, 0xd4, 0x63, 0xb9, 0x76, 0x60, 0xd9, 0x51, 0x80, 0x61,
	0x95, 0x8b, 0x26, 0xa5, 0xff, 0x90, 0x9d, 0x58, 0x3a, 0x48, 0xb5, 0x79, 0xb8, 0x01, 0x1b, 0x1b,
	0x55, 0x60, 0x4b, 0x8e, 0x51, 0xfa, 0xa5, 0xae, 0xa2, 0x43, 0x94, 0x3a, 0x26, 0x79, 0x66, 0xb8,
	0x78, 0xcd, 0xbc, 0x1e, 0x7e, 0x7a, 0x1c, 0xf6, 0x3e, 0x3f, 0x0e, 0x7b, 0x5f, 0x1e, 0x87, 0xbd,
	0x0f, 0x5f, 0x87, 0x3f, 0xfd, 0xdf, 0x9f, 0xfd, 0xe6, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x00,
	0xba, 0x2a, 0xce, 0x02, 0x06, 0x00, 0x00,
}

func (m *AircraftInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AircraftInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AircraftInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CategoryDescription != nil {
		i -= len(*m.CategoryDescription)
		copy(dAtA[i:], *m.CategoryDescription)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.CategoryDescription)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.Notes != nil {
		i -= len(*m.Notes)
		copy(dAtA[i:], *m.Notes)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Notes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Acars != nil {
		i -= len(*m.Acars)
		copy(dAtA[i:], *m.Acars)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Acars)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.Adsb != nil {
		i -= len(*m.Adsb)
		copy(dAtA[i:], *m.Adsb)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Adsb)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.Modes != nil {
		i -= len(*m.Modes)
		copy(dAtA[i:], *m.Modes)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Modes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Engines != nil {
		i -= len(*m.Engines)
		copy(dAtA[i:], *m.Engines)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Engines)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.SeatConfiguration != nil {
		i -= len(*m.SeatConfiguration)
		copy(dAtA[i:], *m.SeatConfiguration)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.SeatConfiguration)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.FirstFlightDate != nil {
		i -= len(*m.FirstFlightDate)
		copy(dAtA[i:], *m.FirstFlightDate)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.FirstFlightDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Built != nil {
		i -= len(*m.Built)
		copy(dAtA[i:], *m.Built)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Built)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ReguUtil != nil {
		i -= len(*m.ReguUtil)
		copy(dAtA[i:], *m.ReguUtil)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.ReguUtil)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Registered != nil {
		i -= len(*m.Registered)
		copy(dAtA[i:], *m.Registered)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Registered)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TestReg != nil {
		i -= len(*m.TestReg)
		copy(dAtA[i:], *m.TestReg)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.TestReg)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Owner != nil {
		i -= len(*m.Owner)
		copy(dAtA[i:], *m.Owner)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Owner)))
		i--
		dAtA[i] = 0x72
	}
	if m.OperatorIata != nil {
		i -= len(*m.OperatorIata)
		copy(dAtA[i:], *m.OperatorIata)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.OperatorIata)))
		i--
		dAtA[i] = 0x6a
	}
	if m.OepratorIcao != nil {
		i -= len(*m.OepratorIcao)
		copy(dAtA[i:], *m.OepratorIcao)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.OepratorIcao)))
		i--
		dAtA[i] = 0x62
	}
	if m.OperatorCallsign != nil {
		i -= len(*m.OperatorCallsign)
		copy(dAtA[i:], *m.OperatorCallsign)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.OperatorCallsign)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Operator != nil {
		i -= len(*m.Operator)
		copy(dAtA[i:], *m.Operator)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Operator)))
		i--
		dAtA[i] = 0x52
	}
	if m.IcaoAircraftType != nil {
		i -= len(*m.IcaoAircraftType)
		copy(dAtA[i:], *m.IcaoAircraftType)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.IcaoAircraftType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LineNumber != nil {
		i -= len(*m.LineNumber)
		copy(dAtA[i:], *m.LineNumber)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.LineNumber)))
		i--
		dAtA[i] = 0x42
	}
	if m.SerialNumber != nil {
		i -= len(*m.SerialNumber)
		copy(dAtA[i:], *m.SerialNumber)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.SerialNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TypeCode != nil {
		i -= len(*m.TypeCode)
		copy(dAtA[i:], *m.TypeCode)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.TypeCode)))
		i--
		dAtA[i] = 0x32
	}
	if m.Model != nil {
		i -= len(*m.Model)
		copy(dAtA[i:], *m.Model)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Model)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ManufacturerName != nil {
		i -= len(*m.ManufacturerName)
		copy(dAtA[i:], *m.ManufacturerName)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.ManufacturerName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ManufacturerIcao != nil {
		i -= len(*m.ManufacturerIcao)
		copy(dAtA[i:], *m.ManufacturerIcao)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.ManufacturerIcao)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Registration != nil {
		i -= len(*m.Registration)
		copy(dAtA[i:], *m.Registration)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Registration)))
		i--
		dAtA[i] = 0x12
	}
	if m.Icao24 == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Icao24)
		copy(dAtA[i:], *m.Icao24)
		i = encodeVarintAircraft(dAtA, i, uint64(len(*m.Icao24)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAircraft(dAtA []byte, offset int, v uint64) int {
	offset -= sovAircraft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AircraftInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Icao24 != nil {
		l = len(*m.Icao24)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.Registration != nil {
		l = len(*m.Registration)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.ManufacturerIcao != nil {
		l = len(*m.ManufacturerIcao)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.ManufacturerName != nil {
		l = len(*m.ManufacturerName)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.Model != nil {
		l = len(*m.Model)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.TypeCode != nil {
		l = len(*m.TypeCode)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.SerialNumber != nil {
		l = len(*m.SerialNumber)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.LineNumber != nil {
		l = len(*m.LineNumber)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.IcaoAircraftType != nil {
		l = len(*m.IcaoAircraftType)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.Operator != nil {
		l = len(*m.Operator)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.OperatorCallsign != nil {
		l = len(*m.OperatorCallsign)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.OepratorIcao != nil {
		l = len(*m.OepratorIcao)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.OperatorIata != nil {
		l = len(*m.OperatorIata)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.Owner != nil {
		l = len(*m.Owner)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.TestReg != nil {
		l = len(*m.TestReg)
		n += 1 + l + sovAircraft(uint64(l))
	}
	if m.Registered != nil {
		l = len(*m.Registered)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.ReguUtil != nil {
		l = len(*m.ReguUtil)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Built != nil {
		l = len(*m.Built)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.FirstFlightDate != nil {
		l = len(*m.FirstFlightDate)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.SeatConfiguration != nil {
		l = len(*m.SeatConfiguration)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Engines != nil {
		l = len(*m.Engines)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Modes != nil {
		l = len(*m.Modes)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Adsb != nil {
		l = len(*m.Adsb)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Acars != nil {
		l = len(*m.Acars)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.Notes != nil {
		l = len(*m.Notes)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.CategoryDescription != nil {
		l = len(*m.CategoryDescription)
		n += 2 + l + sovAircraft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAircraft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAircraft(x uint64) (n int) {
	return sovAircraft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AircraftInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAircraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AircraftInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AircraftInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icao24", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Icao24 = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Registration = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerIcao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ManufacturerIcao = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ManufacturerName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Model = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TypeCode = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SerialNumber = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LineNumber = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcaoAircraftType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IcaoAircraftType = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Operator = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCallsign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperatorCallsign = &s
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OepratorIcao", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OepratorIcao = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorIata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OperatorIata = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Owner = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestReg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TestReg = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Registered = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReguUtil", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ReguUtil = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Built", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Built = &s
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstFlightDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FirstFlightDate = &s
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeatConfiguration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SeatConfiguration = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Engines = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Modes = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adsb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Adsb = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acars", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Acars = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Notes = &s
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAircraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAircraft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CategoryDescription = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAircraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAircraft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAircraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAircraft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAircraft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAircraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAircraft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAircraft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAircraft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAircraft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAircraft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAircraft = fmt.Errorf("proto: unexpected end of group")
)
